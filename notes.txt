'''
We are more likely to have a speed that does not differ too much. Now I only use random speed within a range proportional to the density setting. 

Calculate method: Assume we have evenly spacing: we use a simple test calculation 2.5 +(2.5/density) * 0.447 = base + 2.5 (scalar / density in range 0.1 to 0.9) * 0.447 because conversion from mph to mps is 0.447 

no data hiding in the code as not needed. 
'''


Todo: 
    1.见于堵的情况下倾向于squeeze， 而不dense更多选择会更分散， 则加上一个density 的影响因子. density 和 spacing 成反比则
    2.first car get spacing 问题
    3.code about cars' central position (attributes) not efficient 


June.4th Todo:
    车的速度和加速度不用放在initial condition 里面
    初速度一直， 然后每辆车的加速度 是根据 他和 _前车_  的距离和速度差决定的

    参考 car following model 


June.4th Discuss:
    

June.5th with Haoran
# 1. Class Vehicle: small car/ medium car/ large car

CONST: 
  MIN_SAFE_DISTANCE = 2m 
  CAR_LEN_SMALL, .... 
  MAX_ACCE, and MAX_DECC 
  density and number of vehicles should be fixed. 

  
  free_flow_speed = desired 
  safe_time_headway = T 
  Jam distance s0 = min safe gap = 2 
  s1 好像没出现
  rough是density 


self.__init__(self, x, y, length = [4.5, 5.5, 6.5], v = background_traffic_speed, acceleration = 0, desired_acceleration = [3,2,1]) // or max_deceleration 

car.x - position of the vehicle front
car.length - length of the vehicle
car.y - vehicle lane position(binary:0/1)
car.v - velocity of the car
car.acceleration - acceleration of the vehicle
# car.desired_acceleration - the most comfortable deceleration (value should be negative)
'''
NO, make acceleration positive (take absolute value) 
'''


# TODO: 1. initialize vehicle of any class; 2. get physical range: [car.x, car.x - length]

'''
add 
field: physical range to Vehicle class 
'''


# 2. Initialize Env

background_traffic_speed = 4m/s
, L = 200, ratio = 1: 1: 1 [np.random.choice(0,1,2)], num_vehicles
np.random

num_vehicle_left = num_vehicle/2
num_vehicle_right =  num_vehicle - num_vehicle_left

# For the left lane:
meter_counter = 0
unit_length = L/num_vehicle_left "unit length"
veh_list_left = []

for i in range(num_left):
	veh = np.random.choice(small( {x} = 0, y = 0, length = 4.5, v = background_traffic_speed ), medium(...),large(...))

  front_pos = np.random.uniform(meter_counter + veh.length, meter_counter + unit_length)
  // 	x is head. the lower bound of uniform 
  veh.x  = front_pos
  
  meter_counter += unit_length
  // meter_counter for section id 
  veh_list_left.append(veh)

# For the right lane:
  
state = [veh_list_left, veh_list_right]

state = [[x_0, y_0, length_0, v_0, acceleration_0= 0, desired_acceleration_0]
					[x_1, y_1, length_1, v_1, acceleration_1= 0, desired_acceleration_1]
          (n-1)
          ] // acceleration is 0 when defined.
# t = 0, initialization result excluding acceleration
// now we have all uniform speed , x, max_accleration.
// note: those desired_... should be attributes. 
// IDM: calculate at the deacceleration at that time 

# 3. Calcualte acceleration at t=0 for each vehicle according to IDM:
IDM is for every vehicle defined in the environment:
 				"""
        dv(t)/dt = [1 - (v(t)/v0)^4  - (s*(t)/s(t))^2]
        """
        
list_veh_left.sort(state[0]) ''' sort based on ID? ''' 
list_veh_right.sort(state[0])

  
    def cal_acceler(a_vehicle):
        """
        dv(t)/dt = a[1 - (v(t)/v0)^4  - (s*(t)/s(t))^2]
        """
        acceler = math.pow(
            (a_vehicle.velocity / a_vehicle.get_desired_velocity()), 4)
        deceleration = math.pow(IDM.cal_safe_headway(a_vehicle) / a_vehicle.gap, 2)
        return float(a_vehicle.max_acceler * (1 - acceler - deceleration))

    def cal_safe_headway(a_vehicle):  
      
        veloc = a_vehicle.velocity
        if a_vehicle.front_vehicle:
            front_veloc = a_vehicle.front_vehicle.velocity
        else:
            front_veloc = veloc
        distance = ((a_vehicle.get_safetime_headway() * veloc) +
             ((veloc * (veloc - front_veloc)) / (2 * math.sqrt(
                 a_vehicle.max_acceler * a_vehicle.max_deceleration))))
        res= float(a_vehicle.minimum_distance + max(0, distance))
        return res
		


// note: leading vehicle could change resulting from pulling behavior. 

v0 - free flow speed, 8m/s 


for veh in state:
	veh.a = cal_acceleration(veh)

// 我们不考虑lead vehicle acceleration but only speed

'''
that's right 
the determination of acceleration/deceleration of car i only depends on the velocity and 
velocity different + desired gap 
'''
// 	下一个task:
  1. 研究random分布车的问题
  2. output with different composition (sys.args)

Paper: 
    1. 对Behavior of the IDM 做一些解释


汇报：
    1. initial speed cannot be the same 
    2. the deacceleration should be a positive number, adjusted by the formula 
        also lots of cases of no negativity max(0,res)
    3. the free flow speed is adopted from 2018 NYC mobility report 
    4. we don't care about the dynamic behavior right?? 
    5. lead_vehicle could change, do we reflect this in the OOP?  


现行递减：速度和车间距的关系体现一下


和师兄汇报： 
    0. double check 一下 SML有不同的most_comfort_del 对吧
    1. (velocity = 8 +- 1 )
            ++ the idea of background_traffic_speed. same as velocity? 
    2. 车头位置
    3. deacceleration 的 符号问题又搞不明白了
    4. data hiding 没有很规范.不重要
    6. 当前的acceleration 都是零？ 
    7. 处理第一辆车的时候，那就加速度为0好了


5. b + noise 是怎么回事




重要问题：
    lead_veihicle 这个field 丢失了！！ 
    1. 跟python 中丢失 reference 有关 -- OK, it's actually 10 env resulting in stupid conclusion 
    2. set attribute，若lead_vehicle None 不进入 setting,则net_distance 可能是0 
    3. 在cal_net_中，若前面无车，那也应该是return 很大的value


    4. lane 0 的desired_acceleration 明显比lane 大得多 polynomial magnitude\
    5. Yes, position of the vehicle head is a problem 
    6. 修复 lane = 1 车头的问题 
    7. 在net_distance 中 
    8. 每一次，os.delete outputs directory 